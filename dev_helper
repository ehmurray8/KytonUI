"""
Gets the amplitude and wavelength data using the Mircon Optics SM125,
and the Optical Switch.
"""
# pylint: disable=import-error, relative-import
import sys
import time
import socket
import numpy as np
from tkinter import messagebox


def avg_waves_amps(parent):
    """Gets the average wavelengths and powers, updates data_pts."""
    lens = list(map(lambda x: len(x), parent.snums))
    actual_switches = functools.reduce(lambda x, y: x+y, parent.switches)

    wavelengths_avg, amplitudes_avg = __get_average_data(parent.master.laser, parent.master.switch,
                                                         actual_switches, parent.master, lens)

    chan_errs, data_pts = __process_data(parent, lens, actual_switches,
                                         wavelengths_avg, amplitudes_avg,
                                         switch_num)

    if len(chan_errs) > 0:
        chan_error(chan_errs, parent.chan_error_been_warned, parent.master)
        parent.chan_error_been_warned = True

    return data_pts


def __get_data(all_waves, all_amps, laser, op_switch, actual_switches, master):
    wavelens = []
    amps = []
    for switch in actual_switches:
        try:
            op_switch.set_channel(switch)
            master.after(1250, lambda: __get_sm125_data(all_waves, all_amps, laser))
        except socket.error:
            pass
    return wavelens, amps


def __get_sm125_data(all_waves, all_amps, sm125):
    wavelens, amps, lens = sm125.get_data()
    all_waves.append(wavelens)
    all_amps.append(amps)


def __get_average_data(sm125, op_switch, actual_switches, master, lens):
    need_init = True

    try:

    for i in range(sum(lens)):
        all_waves = []
        all_amps = []
        wavelengths, amplitudes = __get_data(all_waves, all_amps, sm125, op_switch, actual_switches, master)
        if need_init:
            wavelengths_avg = [0] * (len(wavelengths) +
                                     len(actual_switches) - 1)
            amplitudes_avg = [0] * (len(amplitudes) +
                                    len(actual_switches) - 1)
            need_init = False

        switch_chan_starting_index = 0
        for i in range(switch_num):
            switch_chan_starting_index += lens[i]
            offset = 0
        for i, wavelength in enumerate(wavelengths):
            if i == switch_chan_starting_index:
                for waves in all_waves:
                    wavelengths_avg[i + offset] += \
                        waves[switch_chan_starting_index]
                    offset += 1
                if offset != 0:
                    offset -= 1
            else:
                if i + offset < len(wavelengths_avg):
                    wavelengths_avg[i + offset] += wavelength

        offset = 0
        for i, amp in enumerate(amplitudes):
            if i == switch_chan_starting_index:
                for amps in all_amps:
                    amplitudes_avg[i + offset] += \
                        amps[switch_chan_starting_index]
                    offset += 1
                if offset != 0:
                    offset -= 1
            else:
                if i + offset < len(amplitudes_avg):
                    amplitudes_avg[i + offset] += amp

    wavelengths_avg = [x / num_snums for x in wavelengths_avg]
    amplitudes_avg = [x / num_snums for x in amplitudes_avg]
    return wavelengths_avg, amplitudes_avg


def __process_data(parent, lens, actual_switches, wavelengths_avg,
                   amplitudes_avg, switch_num):
    chan_num = 1
    data_pts = {}
    chan_errs = []
    offset = 0
    for chan in parent.channels:
        max_pts = lens[chan_num - 1]
        if chan_num - 1 == switch_num:
            max_pts += len(actual_switches)
        temp = chan_num
        start_index = 0
        while temp > 1:
            start_index += lens[temp - 2]
            temp -= 1
        start_index += offset
        num_snums = 0
        for snum in chan:
            if num_snums < max_pts:
                data_pts[snum] = (wavelengths_avg[start_index],
                                  amplitudes_avg[start_index])
                start_index += 1
            else:
                chan_errs.append(snum)
                data_pts[snum] = (0, 0)
            num_snums += 1
        if chan_num - 1 == switch_num and len(actual_switches) > 1:
            offset = len(actual_switches) - 1
        chan_num += 1
    return chan_errs, data_pts


def chan_error(snums, warned, master):
    """
    Creates the error messsage to alert the user not enough fbgs
    are being scanned.
    """
    if not warned:
        errs_str = "SM125 didn't report any data for the serial numbers: {}.".format(
            ", ".join(snums))
        func = messagebox.showwarning
        add_to_queue(master, func, "Scanning error", errs_str)